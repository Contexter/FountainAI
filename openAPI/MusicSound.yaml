openapi: 3.0.1
info:
  title: MusicSound Orchestration API
  description: |
    This API integrates orchestration functions directly to generate musical files in Csound, LilyPond, and MIDI formats. The API supports generating and executing orchestration commands through endpoints that map directly to Python function names.

    **Dockerized Orchestration**:
    - **FastAPI**: Python-based FastAPI application provides the REST API endpoints for managing orchestration commands.
    - **Python, Csound, and LilyPond**: Orchestration tools include Python functions, Csound synthesis, LilyPond notation, and MIDI data generation.

    **Docker Image Creation**:
    To build the Docker image with all necessary tools for the MusicSound Orchestration API, use the following Dockerfile:
    ```Dockerfile
    # Use Python base image
    FROM python:3.9

    # Install Csound
    RUN apt-get update && apt-get install -y \
        software-properties-common \
        wget \
        python3-pip \
        nano \
        csound

    # Install LilyPond
    RUN wget http://lilypond.org/download/binaries/linux/lilypond-2.24.2-1.linux-64.sh \
        && chmod +x lilypond-2.24.2-1.linux-64.sh \
        && ./lilypond-2.24.2-1.linux-64.sh --batch --prefix=/usr/local

    # Install FastAPI and orchestration tools
    RUN pip install fastapi uvicorn mido lilypond

    # Set working directory and copy API files
    WORKDIR /workspace
    COPY . /workspace

    # Start the FastAPI server
    CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080"]
    ```

    **Python Scripting Examples**:
    - **Generate Csound File**:
      ```python
      def generate_csound_file():
          csound_data = \"\"\"
          <CsoundSynthesizer>
          <CsOptions>
          -o output/drone_output.wav  ; Output audio file
          </CsOptions>

          <CsInstruments>
          sr = 44100
          ksmps = 32
          nchnls = 2
          0dbfs = 1

          instr 1
              ifreq = p4
              iamp = p5
              aout oscil iamp, ifreq, 1
              outs aout, aout
          endin
          </CsInstruments>

          <CsScore>
          f1 0 16384 10 1

          i1 0 30 55 0.3
          </CsScore>
          </CsoundSynthesizer>
          \"\"\"
          csound_file_path = 'output/drone_orchestra.csd'
          with open(csound_file_path, 'w') as csound_file:
              csound_file.write(csound_data)
          return csound_file_path
      ```

    - **Generate LilyPond File**:
      ```python
      def generate_lilypond_file():
          lilypond_data = \"\"\"
          \\version "2.24.2"

          \\header {
            title = "Drone Melody"
            composer = "Your Name"
          }

          \\score {
            \\new Staff {
              \\clef "bass"
              \\time 4/4
              \\key c \\major

              c1 c1 c1 c1
              c1 c1 c1 c1
            }

            \\layout { }

            \\midi {
              \\tempo 4 = 60
            }
          }
          \"\"\"
          lilypond_file_path = 'output/drone_notation.ly'
          with open(lilypond_file_path, 'w') as lilypond_file:
              lilypond_file.write(lilypond_data)
          return lilypond_file_path
      ```

    - **Generate MIDI File**:
      ```python
      def generate_midi_file():
          midi_file_path = 'output/drone_melody.mid'
          mid = MidiFile()
          track = MidiTrack()
          mid.tracks.append(track)

          # Set the instrument (Program Change)
          track.append(Message('program_change', program=0))  # Acoustic Grand Piano

          # Define parameters for a drone pattern
          note = 33  # A1, equivalent to 55 Hz
          velocity = 64
          duration = 1920  # Whole note duration

          # Repeated notes to simulate a drone
          for _ in range 8]:
              track.append(Message('note_on', note=note, velocity=velocity, time=0))
              track.append(Message('note_off', note=note, velocity=velocity, time=duration))

          # Save the MIDI file
          mid.save(midi_file_path)
          return midi_file_path
      ```

  version: "1.2"
servers:
  - url: https://musicsound.fountain.coach
    description: Production server for MusicSound Orchestration API
  - url: http://localhost:8080
    description: Development server for testing

paths:
  /generate_csound_file:
    post:
      summary: Generate Csound File
      operationId: generateCsoundFile
      description: |
        Calls the Python function `generate_csound_file` to create a `.csd` file based on preset orchestration settings.
      responses:
        '201':
          description: Csound file successfully generated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  csoundFilePath:
                    type: string
                    description: Path to the generated Csound file.

  /generate_lilypond_file:
    post:
      summary: Generate LilyPond File
      operationId: generateLilyPondFile
      description: |
        Calls the Python function `generate_lilypond_file` to create a `.ly` file based on preset orchestration settings.
      responses:
        '201':
          description: LilyPond file successfully generated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  lilyPondFilePath:
                    type: string
                    description: Path to the generated LilyPond file.

  /generate_midi_file:
    post:
      summary: Generate MIDI File
      operationId: generateMIDIFile
      description: |
        Calls the Python function `generate_midi_file` to create a `.mid` file based on preset orchestration settings.
      responses:
        '201':
          description: MIDI file successfully generated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  midiFilePath:
                    type: string
                    description: Path to the generated MIDI file.

  /execute_csound:
    post:
      summary: Execute Csound
      operationId: executeCsound
      description: |
        Calls the Python function `execute_csound` to process an existing `.csd` file using Csound.
      requestBody:
        required: true
        description: JSON object specifying the path to the `.csd` file to process.
        content:
          application/json:
            schema:
              type: object
              properties:
                csoundFilePath:
                  type: string
                  description: Path to the existing `.csd` file for processing.
      responses:
        '200':
          description: Csound processing completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the success of Csound processing.

  /execute_lilypond:
    post:
      summary: Execute LilyPond
      operationId: executeLilyPond
      description: |
        Calls the Python function `execute_lilypond` to process an existing `.ly` file using LilyPond.
      requestBody:
        required: true
        description: JSON object specifying the path to the `.ly` file for processing.
        content:
          application/json:
            schema:
              type: object
              properties:
                lilyPondFilePath:
                  type: string
                  description: Path to the existing `.ly` file for processing.
      responses:
        '200':
          description: LilyPond processing completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the success of LilyPond processing.
