openapi: 3.1.0
info:
  title: GitHub CLI Wrapper
  version: 1.0.0
  description: >
    A Vapor app that wraps GitHub CLI commands for repository management, including secrets management.
    ## Security Requirements
    - Deployed on an Ubuntu 20.04 VPS with UFW, Nginx SSL proxy, and Let's Encrypt Certbot.
    - Use GitHub Actions for CI/CD to automate building, testing, and deploying the app with security scans.
    - Protect routes using JWT middleware.
    - Manage secrets using GitHub Secrets.
    - Implement proper error handling and logging without exposing sensitive information.
    - Use the smallest possible base image for Docker and run the app as a non-root user.
    - Regularly update the system and dependencies to mitigate vulnerabilities.

servers:
  - url: https://gh.fountain.coach
paths:
  /generate-token:
    get:
      summary: Generate JWT Token
      description: >
        Generates a JWT token for authenticated users. Uses custom auth with `AUTH_USERNAME` and `AUTH_PASSWORD` environment variables, set via GitHub Secrets. The GitHub token is not used for this.
      operationId: generateToken
      security: [] # No bearerAuth required for this endpoint
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
          description: The username for authentication
        - name: password
          in: query
          required: true
          schema:
            type: string
          description: The password for authentication
      responses:
        '200':
          description: Successfully generated JWT token
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-1:
                  value: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 401
                    message: "Unauthorized - Invalid credentials"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 500
                    message: "Internal Server Error"
  /repo/tree:
    get:
      summary: Fetch repository tree
      description: >
        Fetches the tree structure of a repository. Requires a valid JWT token for authentication.
      operationId: fetchRepoTree
      parameters:
        - name: repository
          in: query
          required: true
          schema:
            type: string
          description: The repository in the format owner/repository
          example: "owner/repository"
        - name: branch
          in: query
          required: false
          schema:
            type: string
          description: The branch to fetch the tree from (default is "main")
          example: "main"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully fetched repository tree
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepositoryTree'
              examples:
                example-1:
                  value:
                    - path: "README.md"
                      type: "file"
                    - path: "src"
                      type: "dir"
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 401
                    message: "Unauthorized - Invalid token"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 500
                    message: "Internal Server Error"
  /repo/contents:
    get:
      summary: List repository contents
      description: >
        Lists the contents of a repository directory. Requires a valid JWT token for authentication.
      operationId: listRepoContents
      parameters:
        - name: repository
          in: query
          required: true
          schema:
            type: string
          description: The repository in the format owner/repository
          example: "owner/repository"
        - name: path
          in: query
          required: false
          schema:
            type: string
          description: The directory path to list contents of (default is root)
          example: "src"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully listed contents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepositoryTree'
              examples:
                example-1:
                  value:
                    - path: "README.md"
                      type: "file"
                    - path: "src"
                      type: "dir"
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 401
                    message: "Unauthorized - Invalid token"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 500
                    message: "Internal Server Error"
  /repo/file:
    get:
      summary: Fetch file content
      description: >
        Fetches the content of a specific file in the repository. Requires a valid JWT token for authentication.
      operationId: fetchFileContent
      parameters:
        - name: repository
          in: query
          required: true
          schema:
            type: string
          description: The repository in the format owner/repository
          example: "owner/repository"
        - name: path
          in: query
          required: true
          schema:
            type: string
          description: The path to the file to fetch content from
          example: "README.md"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully fetched file content
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-1:
                  value: "# Project Title\n\nThis is a sample README file."
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 401
                    message: "Unauthorized - Invalid token"
        '404':
          description: Not Found - File does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 404
                    message: "Not Found - File does not exist"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 500
                    message: "Internal Server Error"
  /repo/details:
    get:
      summary: Get repository details
      description: >
        Fetches details about the repository. Requires a valid JWT token for authentication.
      operationId: getRepoDetails
      parameters:
        - name: repository
          in: query
          required: true
          schema:
            type: string
          description: The repository in the format owner/repository
          example: "owner/repository"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully fetched repository details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDetails'
              examples:
                example-1:
                  value:
                    full_name: "owner/repository"
                    description: "This is a sample repository."
                    owner:
                      login: "owner"
                    private: false
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 401
                    message: "Unauthorized - Invalid token"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    code: 500
                    message: "Internal Server Error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RepositoryTree:
      type: object
      properties:
        path:
          type: string
        type:
          type: string
    FileContent:
      type: object
      properties:
        content:
          type: string
    RepositoryDetails:
      type: object
      properties:
        full_name:
          type: string
        description:
          type: string
        owner:
          type: object
          properties:
            login:
              type: string
        private:
          type: boolean
    Branch:
      type: object
      properties:
        name:
          type: string
    Commit:
      type: object
      properties:
        sha:
          type: string
        commit:
          type: object
          properties:
            message:
              type: string
    Contributor:
      type: object
      properties:
        login:
          type: string
    PullRequest:
      type: object
      properties:
        number:
          type: integer
        title:
          type: string
    Issue:
      type: object
      properties:
        number:
          type: integer
        title:
          type: string
    Secret:
      type: object
      properties:
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
